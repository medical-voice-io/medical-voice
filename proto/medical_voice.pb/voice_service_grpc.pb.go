// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: voice_service.proto

package medical_voice_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoiceServiceClient is the client API for VoiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoiceServiceClient interface {
	TransferVoiceData(ctx context.Context, opts ...grpc.CallOption) (VoiceService_TransferVoiceDataClient, error)
}

type voiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoiceServiceClient(cc grpc.ClientConnInterface) VoiceServiceClient {
	return &voiceServiceClient{cc}
}

func (c *voiceServiceClient) TransferVoiceData(ctx context.Context, opts ...grpc.CallOption) (VoiceService_TransferVoiceDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &VoiceService_ServiceDesc.Streams[0], "/voice.VoiceService/transferVoiceData", opts...)
	if err != nil {
		return nil, err
	}
	x := &voiceServiceTransferVoiceDataClient{stream}
	return x, nil
}

type VoiceService_TransferVoiceDataClient interface {
	Send(*VoiceData) error
	CloseAndRecv() (*VoiceResponse, error)
	grpc.ClientStream
}

type voiceServiceTransferVoiceDataClient struct {
	grpc.ClientStream
}

func (x *voiceServiceTransferVoiceDataClient) Send(m *VoiceData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *voiceServiceTransferVoiceDataClient) CloseAndRecv() (*VoiceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(VoiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VoiceServiceServer is the server API for VoiceService service.
// All implementations must embed UnimplementedVoiceServiceServer
// for forward compatibility
type VoiceServiceServer interface {
	TransferVoiceData(VoiceService_TransferVoiceDataServer) error
	mustEmbedUnimplementedVoiceServiceServer()
}

// UnimplementedVoiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVoiceServiceServer struct {
}

func (UnimplementedVoiceServiceServer) TransferVoiceData(VoiceService_TransferVoiceDataServer) error {
	return status.Errorf(codes.Unimplemented, "method TransferVoiceData not implemented")
}
func (UnimplementedVoiceServiceServer) mustEmbedUnimplementedVoiceServiceServer() {}

// UnsafeVoiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoiceServiceServer will
// result in compilation errors.
type UnsafeVoiceServiceServer interface {
	mustEmbedUnimplementedVoiceServiceServer()
}

func RegisterVoiceServiceServer(s grpc.ServiceRegistrar, srv VoiceServiceServer) {
	s.RegisterService(&VoiceService_ServiceDesc, srv)
}

func _VoiceService_TransferVoiceData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VoiceServiceServer).TransferVoiceData(&voiceServiceTransferVoiceDataServer{stream})
}

type VoiceService_TransferVoiceDataServer interface {
	SendAndClose(*VoiceResponse) error
	Recv() (*VoiceData, error)
	grpc.ServerStream
}

type voiceServiceTransferVoiceDataServer struct {
	grpc.ServerStream
}

func (x *voiceServiceTransferVoiceDataServer) SendAndClose(m *VoiceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *voiceServiceTransferVoiceDataServer) Recv() (*VoiceData, error) {
	m := new(VoiceData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VoiceService_ServiceDesc is the grpc.ServiceDesc for VoiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voice.VoiceService",
	HandlerType: (*VoiceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "transferVoiceData",
			Handler:       _VoiceService_TransferVoiceData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "voice_service.proto",
}
